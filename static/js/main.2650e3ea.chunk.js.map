{"version":3,"sources":["components/Home/Home.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Header","window","onclick","event","target","matches","i","dropdowns","document","getElementsByClassName","length","openDropdown","classList","contains","remove","alt","to","onClick","getElementById","toggle","width","height","viewBox","xmlns","y","style","fill","id","App","exact","path","component","Boolean","location","hostname","match","router","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2650e3ea.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Home.css\";\n\nconst Home = () => {\n  return (\n    <div className=\"home-page\">\n      <section>\n        <h1 className=\"center-piece\">Welcome!</h1>\n      </section>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./Header.css\";\n\nconst Header = () => {\n\n  const displayDropdownMenu = () => {\n    document.getElementById(\"myDropdown\").classList.toggle(\"show\");\n  };\n\n  window.onclick = function(event) {\n    if (\n      !event.target.matches(\".navbar-toggle\") &&\n      !event.target.matches(\".menu-svg\")\n    ) {\n      var dropdowns = document.getElementsByClassName(\"navbar-dropdown\");\n      var i;\n      for (i = 0; i < dropdowns.length; i++) {\n        var openDropdown = dropdowns[i];\n        if (openDropdown.classList.contains(\"show\")) {\n          openDropdown.classList.remove(\"show\");\n        }\n      }\n    }\n  };\n\n\n  return (\n    <header className=\"My-Site-header\">\n      <div className=\"yoursTruly\">\n        <span className=\"name center-piece\" alt=\"Name\">\n          Deont√© J Cooper\n        </span>\n        <span className=\"occupation center-piece\" alt=\"Occupation\">\n          Software Engineer\n        </span>\n      </div>\n      <div className=\"navbar center-piece\">\n        <nav className=\"center-piece visible@m web-nav\" alt=\"Navbar\">\n          <NavLink to=\"/\" className=\"nav\" alt=\"Home Link\">\n            {\" \"}\n            Home{\" \"}\n          </NavLink>\n          <hr></hr>\n          <NavLink to=\"/bio\" className=\"nav\" alt=\"Bio Link\">\n            {\" \"}\n            Bio{\" \"}\n          </NavLink>\n          <hr></hr>\n          <NavLink to=\"/projects\" className=\"nav\" alt=\"Projects Link\">\n            {\" \"}\n            Projects{\" \"}\n          </NavLink>\n          <hr></hr>\n          <NavLink to=\"/blog\" className=\"nav\" alt=\"Blog Link\">\n            {\" \"}\n            Blog{\" \"}\n          </NavLink>\n          <hr></hr>\n          <NavLink to=\"/contact\" className=\"nav\" alt=\"Contact Link\">\n            {\" \"}\n            Contact{\" \"}\n          </NavLink>\n        </nav>\n        <nav className=\"center-piece hidden@m dropdown\" alt=\"Navbar\">\n          <button\n            onClick={displayDropdownMenu}\n            className=\"navbar-toggle\"\n            alt=\"Navigation Dropdown Menu Button\"\n          >\n            <svg\n              width=\"60\"\n              height=\"30\"\n              viewBox=\"0 0 60 40\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"menu-svg\"\n            >\n              <rect\n                y=\"9\"\n                width=\"60\"\n                height=\"6\"\n                style={{ fill: \"rgb(255,255,255)\" }}\n                className=\"menu-svg\"\n              ></rect>\n              <rect\n                y=\"18\"\n                width=\"60\"\n                height=\"6\"\n                style={{ fill: \"rgb(255,255,255)\" }}\n                className=\"menu-svg\"\n              ></rect>\n              <rect\n                y=\"27\"\n                width=\"60\"\n                height=\"6\"\n                style={{ fill: \"rgb(255,255,255)\" }}\n                className=\"menu-svg\"\n              ></rect>\n            </svg>\n          </button>\n          <div\n            id=\"myDropdown\"\n            className=\"navbar-dropdown\"\n            alt=\"Navigation Dropdown Menu\"\n          >\n            <ul>\n              <li className=\"nav\">\n                <NavLink to=\"/bio\" className=\"nav\" alt=\"Bio Link\">\n                  {\" \"}\n                  Bio{\" \"}\n                </NavLink>\n              </li>\n              <hr className=\"dropdown-divider\"></hr>\n              <li className=\"nav\">\n                <NavLink to=\"/projects\" className=\"nav\" alt=\"Projects Link\">\n                  {\" \"}\n                  Projects{\" \"}\n                </NavLink>\n              </li>\n              <hr className=\"dropdown-divider\"></hr>\n              <li className=\"nav\">\n                <NavLink to=\"/blog\" className=\"nav\" alt=\"Blog Link\">\n                  {\" \"}\n                  Blog{\" \"}\n                </NavLink>\n              </li>\n              <hr className=\"dropdown-divider\"></hr>\n              <li className=\"nav\">\n                <NavLink to=\"/contact\" className=\"nav\" alt=\"Contact Link\">\n                  {\" \"}\n                  Contact{\" \"}\n                </NavLink>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Home from \"./components/Home/Home\";\nimport Header from \"./components/Header/Header\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <main className=\"My-Site\">\n      <Header />\n      <Route exact path=\"/\" component={Home} />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst router = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\nReactDOM.render(router, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}